// <auto-generated />
using System;
using Kodigos.Infra.Data.Contexto;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Kodigos.API.Migrations
{
    [DbContext(typeof(KodigosContext))]
    [Migration("20230730155821_Initial_Migration")]
    partial class Initial_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("accountCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("accountNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("agency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("typePersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("accountCategoryId");

                    b.HasIndex("typePersonId");

                    b.HasIndex("userId");

                    b.ToTable("Administration.Account", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.AccountCategory.AccountCategoryDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Administration.AccountCategory", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.ExpenseCategory.ExpenseCategoryDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Administration.ExpenseCategory", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<bool>("acceptInstallment")
                        .HasColumnType("bit");

                    b.Property<long>("accountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("userId");

                    b.ToTable("Administration.PaymentMethods", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethodsTypes.PaymentMethodsTypesDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<long>("paymentMethodsId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("paymentMethodsId");

                    b.ToTable("Administration.PaymentMethods.Types", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.RevenueCategory.RevenueCategoryDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("initials")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Administration.RevenueCategory", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("userId");

                    b.ToTable("Administration.Supplier", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("lastAccessDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administration.Users", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("accountId")
                        .HasColumnType("bigint");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("daysBetweenInstallments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("expenseCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("expenseStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("expenseType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("numberInstallments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("obs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("paymentMethodsId")
                        .HasColumnType("bigint");

                    b.Property<string>("typeInstallment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("typePersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("expenseCategoryId");

                    b.HasIndex("paymentMethodsId");

                    b.HasIndex("typePersonId");

                    b.HasIndex("userId");

                    b.ToTable("Expense", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseInstallmentsDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<DateTime>("dueDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("expenseId")
                        .HasColumnType("bigint");

                    b.Property<long>("installment")
                        .HasColumnType("bigint");

                    b.Property<string>("installmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isPaid")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("expenseId");

                    b.ToTable("Expense.Installments", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpensePaymentMethodsTypesDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("expenseId")
                        .HasColumnType("bigint");

                    b.Property<long>("expenseInstallmentsId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("paymentDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("paymentMethodsId")
                        .HasColumnType("bigint");

                    b.Property<long>("paymentMethodsTypesId")
                        .HasColumnType("bigint");

                    b.Property<double?>("taxRate")
                        .HasColumnType("float");

                    b.Property<double?>("totalPayment")
                        .HasColumnType("float");

                    b.Property<double?>("trafficTicket")
                        .HasColumnType("float");

                    b.Property<double?>("value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("expenseId");

                    b.HasIndex("expenseInstallmentsId");

                    b.HasIndex("paymentMethodsId");

                    b.HasIndex("paymentMethodsTypesId");

                    b.ToTable("Expense.PaymentMethods.Types", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Help.HelpDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<string>("cpf")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("typePerson")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Help.Help", (string)null);
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Revenue.RevenueDTO", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"), 1L, 1);

                    b.Property<long>("accountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("dateCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("dateUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<string>("obs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("revenueCategoryId")
                        .HasColumnType("bigint");

                    b.Property<string>("revenueReceipt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("revenueStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("typePersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<double>("value")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("accountId");

                    b.HasIndex("revenueCategoryId");

                    b.HasIndex("typePersonId");

                    b.HasIndex("userId");

                    b.ToTable("Revenue", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NetDevPack.Security.Jwt.Core.Model.KeyMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("KeyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Parameters")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SecurityKeys");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.AccountCategory.AccountCategoryDTO", "accountCategory")
                        .WithMany()
                        .HasForeignKey("accountCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", "typePerson")
                        .WithMany()
                        .HasForeignKey("typePersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("accountCategory");

                    b.Navigation("typePerson");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.AccountCategory.AccountCategoryDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.ExpenseCategory.ExpenseCategoryDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("account");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethodsTypes.PaymentMethodsTypesDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", "paymentMethods")
                        .WithMany("paymentMethodsTypes")
                        .HasForeignKey("paymentMethodsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("paymentMethods");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.RevenueCategory.RevenueCategoryDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", "account")
                        .WithMany("expense")
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.ExpenseCategory.ExpenseCategoryDTO", "expenseCategory")
                        .WithMany()
                        .HasForeignKey("expenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", "paymentMethods")
                        .WithMany("expense")
                        .HasForeignKey("paymentMethodsId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", "typePerson")
                        .WithMany("expense")
                        .HasForeignKey("typePersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("account");

                    b.Navigation("expenseCategory");

                    b.Navigation("paymentMethods");

                    b.Navigation("typePerson");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseInstallmentsDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Expense.ExpenseDTO", "expense")
                        .WithMany("expenseInstallments")
                        .HasForeignKey("expenseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("expense");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpensePaymentMethodsTypesDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Expense.ExpenseDTO", "expense")
                        .WithMany("expensePaymentMethodsTypes")
                        .HasForeignKey("expenseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Expense.ExpenseInstallmentsDTO", "expenseInstallments")
                        .WithMany("expensePaymentMethodsTypes")
                        .HasForeignKey("expenseInstallmentsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", "paymentMethods")
                        .WithMany("expensePaymentMethodsTypes")
                        .HasForeignKey("paymentMethodsId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.PaymentMethodsTypes.PaymentMethodsTypesDTO", "paymentMethodsTypes")
                        .WithMany("expensePaymentMethodsTypes")
                        .HasForeignKey("paymentMethodsTypesId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("expense");

                    b.Navigation("expenseInstallments");

                    b.Navigation("paymentMethods");

                    b.Navigation("paymentMethodsTypes");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Revenue.RevenueDTO", b =>
                {
                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", "account")
                        .WithMany()
                        .HasForeignKey("accountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.RevenueCategory.RevenueCategoryDTO", "revenueCategory")
                        .WithMany()
                        .HasForeignKey("revenueCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", "typePerson")
                        .WithMany("revenue")
                        .HasForeignKey("typePersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Kodigos.Dominio.ModelsData.Administration.Users.UsersDTO", "user")
                        .WithMany()
                        .HasForeignKey("userId");

                    b.Navigation("account");

                    b.Navigation("revenueCategory");

                    b.Navigation("typePerson");

                    b.Navigation("user");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.Account.AccountDTO", b =>
                {
                    b.Navigation("expense");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethods.PaymentMethodsDTO", b =>
                {
                    b.Navigation("expense");

                    b.Navigation("expensePaymentMethodsTypes");

                    b.Navigation("paymentMethodsTypes");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.PaymentMethodsTypes.PaymentMethodsTypesDTO", b =>
                {
                    b.Navigation("expensePaymentMethodsTypes");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Administration.TypePerson.SupplierDTO", b =>
                {
                    b.Navigation("expense");

                    b.Navigation("revenue");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseDTO", b =>
                {
                    b.Navigation("expenseInstallments");

                    b.Navigation("expensePaymentMethodsTypes");
                });

            modelBuilder.Entity("Kodigos.Dominio.ModelsData.Expense.ExpenseInstallmentsDTO", b =>
                {
                    b.Navigation("expensePaymentMethodsTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
